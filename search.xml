<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[hexo发布]]></title>
      <url>%2F2017%2F04%2F30%2Fhexo%E5%8F%91%E5%B8%83%2F</url>
      <content type="text"><![CDATA[发布hexo发布到github上一个账号只能发布一次，创建新的github库名字必须是&lt;github用户名&gt;.github.io 配置到github在_config.yml中找到deploy中添加一下内容1234deploy: type: git repository: https://github.com/&lt;github用户名&gt;/&lt;github用户名&gt;.github.io.git branch: master 下载发布插件1npm install hexo-deployer-git --save 发布12hexo g //生成静态页hexo d //发布博客]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo安装]]></title>
      <url>%2F2017%2F04%2F30%2Fhexo%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[下载hexo脚手架工具1npm install hexo-cli -g 下载后可以在命令行下生成一个全局命令hexo 初始化博客1hexo init &lt;博客文件夹名&gt; 进入博客文件夹1cd &lt;博客文件夹名&gt; 启动hexo本地服务1hexo server 默认端口号为4000，如果端口被占用可以使用 1hexo server -p &lt;端口号&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[node发布与订阅-观察者模式]]></title>
      <url>%2F2017%2F04%2F30%2Fnode%E5%8F%91%E5%B8%83%E4%B8%8E%E8%AE%A2%E9%98%85%2F</url>
      <content type="text"><![CDATA[发布订阅模式 一种一对多的关系，订阅事件和发布事件 {‘水开了’:[‘泡面’,’洗澡’]} 绑定事件 on维护一个一对多的关系{“被监听的事件名”:[事件1,事件2,事件3]} 发射事件 emit当触发事件后会将绑定的事件依次触发通过发射的事件名，将数组里面的参数依次执行]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[发布node模块包]]></title>
      <url>%2F2017%2F04%2F30%2F%E5%8F%91%E5%B8%83node%E6%A8%A1%E5%9D%97%E5%8C%85%2F</url>
      <content type="text"><![CDATA[发布自己的包 多个js文件组成的就叫包 通常都存在一个入口文件 发布这个文件夹（发布的包不能和已经存在的包相同） 包中必须要有package.json文件 向npm官网发包 切换到官方npm 1nrm use npm 如果有账号表示登录，没有账号表示新建账号 1npm addUser 发布 1npm publish 删除模块 1npm unpublish &lt;模块名&gt;@&lt;版本号&gt; 查询是否登录过 1npm whoami 使用idoc进行文档展示 安装idoc1npm install idoc -g]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[node核心模块]]></title>
      <url>%2F2017%2F04%2F30%2Fnode%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%2F</url>
      <content type="text"><![CDATA[核心模块引用核心模块不需要安装，也不需要使用./或者../来引入 util模块util 最主要的功能是继承，判断类型 js中的继承call，原型继承，new，extends Obj.create() es5的继承 只继承公有1Sun.prototype = Obj.create(Parent.prototype) Object.setPrototypeOf() es6只继承公有1Object.setPrototypeOf(Sun.prototype,Parent.prototype); 原理Sun.prototype.proto = Parent.prototype call 只继承私有属性 Sun.prototype = new Parent() 可以继承公有和私有的方法 缺点不能传递参数 Sun.prototype.proto = Parent.prototype 通过原型链连接父亲的原型 util.inherits(Child,Parent); //node中的继承（继承公有属性） events模块常用的包括 on，emit，once，removeListener，removeAllListener]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[node模块安装]]></title>
      <url>%2F2017%2F04%2F30%2Fnode%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[模块 文件模块 内置模块 第三方模块模块安装 npm root -g 可以查看安装到哪里去了 全局安装 -g 在命令行下使用 nrm 切换源的工具 默认下载从官方下载npm，nrm可以切换国内数据源 全局安装nrm 1npm install -g nrm 列出所有可用的源 1nrm ls 测试源的速度 1nrm test 添加数据源 1nrm add &lt;源名字&gt; &lt;地址&gt; // 删除数据源 1nrm del &lt;源名字&gt; // 使用数据源 1nrm use &lt;源名字&gt; // 本地安装 （如果切换到淘宝后，以后都是通过淘宝进行安装） 本地安装主要在项目中使用 本地安装会默认安装到node_modules 中,如果没有初始化package.json可能会安装上一node_modules目录 123npm init -ynpm install jquery --save //安装npm uninstall jquery --save //卸载 项目依赖 上线需要开发时也需要 mime1--save 可以简写 -S 开发依赖 上线不需要，开发时需要 webpack gulp1--save-dev 可以简写 -D 安装依赖 当我们文件上传到github上，会node_module文件忽略掉，别人下载代码后需要执行npm install 将所有依赖进行安装1npm install 安装指定版本1npm install &lt;依赖名&gt;@版本号 查看指定版本号1npm info &lt;依赖名&gt; yarn 也是安装模块的方式，和npm一样。 1npm install yarn -g 初始化package.json 1yarn init -y 安装模块如果是项目依赖则不用标注，如果是开发依赖需要标注（-dev） 12yarn add &lt;依赖名&gt; //项目依赖yarn add &lt;依赖名&gt; -dev //开发依赖 删除模块 1yarn remove &lt;依赖名&gt; （-dev） 找回模块 1yarn install]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[node基础（一）]]></title>
      <url>%2F2017%2F04%2F30%2Fnode%E5%9F%BA%E7%A1%80%2F</url>
      <content type="text"><![CDATA[node 默认执行一个‘文件’ 时，就会套一层闭包函数，所有代码都是在个函数中执行的，默认这个函数提供5个参数，这五个参数可以直接使用，不用声明可以直接使用exports,require,module,__filename,dirname 1.process 进程对象 2.Buffer 缓冲区，表示内存中的数据（16进制） 3.clearImmediate , setImmediate 4.clearInterval , setInterval 5.clearTimeout , setTimeout 6.console console 顺序不定的 console.log(‘log’); console.error(‘error’); console.warn(‘warn’); console.info(‘info’); setTimeout 异步 (1)这里的this是setTimeout 自己console.log(this);//这里的this被外层的闭包改掉了，是个{}(function(){console.log(this);})();//这里的this是global 改变this指向的方式 1.call apply 2.bind 3.var that = this; 4.arrow func 即箭头函数 (2)setTimeout(function(参数1,参数2){console.log(参数1，参数2);},1000,’参数1’,’参数2’)； 高阶函数 let a = b =&gt; c =&gt; b + c;console.log(a(2)(3)); //5 setImmediate 不能传递时间等待同步代码执行后调用，没有写时间的setTimeout1234567setImmediate(function () &#123; console.log(&apos;setImmediate&apos;)&#125;);setTimeout(function () &#123; console.log(&apos;setTimeout&apos;)&#125;);console.log(&apos;ok&apos;);//默认setTimeout 有可能比 setImmediate 先执行 process 代码执行时会开一个进程，代码运行完成后进程就结束了123456setInterval(function () &#123; //process.pid//当前进程id console.log(process.pid); //process.kill(13140); //杀掉进程 //process.exit();//退出进程&#125;,1000); 123process.nextTick(function () &#123; console.log(&apos;nextTick&apos;)&#125;);//是异步的函数 nextTick &gt; setImmediate &gt; setTimeout]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[node同步与异步]]></title>
      <url>%2F2017%2F04%2F30%2Fnode%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%2F</url>
      <content type="text"><![CDATA[同步与异步node中异步包括： setTimeout callback process setImmediate setInterval 阻塞非阻塞针对的内核，厨师，如果厨师不释放掉服务员，主线程不可能异步 非阻塞是异步的前置条件 主线是单线程的，内核是多线程 单线程&amp;多线程 一个个发短信 群发短信多线程 进程包括线程，在node中一个进程只能包括一个线程，node可以多开多个线程，开多个进程（子进程） 事件循环 事件驱动]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git发布静态网站]]></title>
      <url>%2F2017%2F04%2F29%2Fgit%E5%8F%91%E5%B8%83%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%2F</url>
      <content type="text"><![CDATA[在github上发布静态网站 必须在当前项目下建立一个gh-pages的分支 将我们需要发布的内容推送到gh-pages这个分支上 推送到远程仓库上即可 github会给你一个在线地址 执行步骤 git checkout -b gh-pages touch index.html git add . git commit -m “add index.html” git push origin gh-pages-在github中的setting页可以查找到网址+文件名即可（默认会展示index.html） 获取自己仓库的代码1git clone &lt;地址&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git解决冲突]]></title>
      <url>%2F2017%2F04%2F29%2Fgit%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%2F</url>
      <content type="text"><![CDATA[处理冲突由于两个分支改变了相同的文件，但是文件内容不同，这时候需要手动吹，再次提交，就可以完成合并 模块化开发，可以降低冲突的发生 查看git提交图谱1git log --graph 通过上下方向键拉倒提交日志最低端，按Q键退出提交日志窗口。 github注册之后需要配置邮箱创建有内容的文件12echo &quot;重写的内容&quot; &gt; README.mdecho &quot;需要追加的内容&quot; &gt;&gt; README.md 本地仓库与远程仓库进行关联1git remote add &lt;名字&gt; &lt;地址&gt; 查看远程仓库的连接列表1git remote -v 删除远程仓库的连接1git remote &lt;连接名&gt; 推送到远程仓库-u 为upstream 设置之后下次推送时可以使用简写123git push origin master -u简写git push]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git分支]]></title>
      <url>%2F2017%2F04%2F29%2Fgit%E5%88%86%E6%94%AF%2F</url>
      <content type="text"><![CDATA[查看当前git分支1git branch 创建分支1git branch &lt;分支名&gt; 切换分支1git checkout &lt;分支名&gt; 删除分支注：删除分支之前一定确定要删除的分支，不是当前所在分支，切换其他分支之后即可删除1git branch -D &lt;分支名&gt; 创建并切换指定分支1git checkout -b &lt;分支名&gt; 分支合并 用主干分支合并分支注：默认master是主干1git merge &lt;分支名&gt; 合并分支后 被合并的分支删除即可]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git文件回滚]]></title>
      <url>%2F2017%2F04%2F29%2Fgit%E6%96%87%E4%BB%B6%E5%9B%9E%E6%BB%9A%2F</url>
      <content type="text"><![CDATA[跨过暂存区直接将本地文件提交到版本库如果执行过一次增加到版本库 git commit -a -m &quot;更新内容描述&quot; 从暂存区拉取历史文件 全部拉取回来1git checkout . 拉取某一个文件1git checkout &lt;文件名&gt; 从版本库将文件某一版本回滚到暂存区和工作区1git reset --hard &lt;版本号&gt; 查看所有操作的版本号1git reflog 搜索带有&lt;需要查询的关键字&gt;的版本号1git log --grep=&lt;需要查询的关键字&gt; 搜索&lt;作者/用户名&gt;提交的历史版本1git log --author=&lt;作者/用户名&gt; 加入暂存区后，返回上一次的添加 (删除本次的 add) 返回指定文件 1git reset HEAD &lt;文件名&gt; 返回所有文件 1git reset HEAD .]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git文件对比]]></title>
      <url>%2F2017%2F04%2F29%2Fgit%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%AF%B9%E6%AF%94%2F</url>
      <content type="text"><![CDATA[查看版本信息1git log 或者1git log --oneline 文件内容比对 工作区和暂存区文件比较 1git diff 暂存区和版本文件比较 1git diff --cached 工作区和版本库比较 1git diff master]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git]]></title>
      <url>%2F2017%2F04%2F29%2Fgit%2F</url>
      <content type="text"><![CDATA[pwd print working directory 打印当前工作目录 告诉git当前用户 用git第一次需要配置 以后都不需要 123git config --global user.name &lt;your name&gt;git config --global user.email &lt;your email&gt;git config list 查看配置列表 初始化文件夹（告诉git那个文件夹归git所管理）1git init 打开文件夹1cd 删除文件夹 循环删除（递归删除）1rm -rf &lt;文件夹名&gt; 删除文件1rm &lt;文件名&gt; macOS中查看隐藏文件夹1ls -a 新建文件1touch &lt;文件名&gt; 查看文件名1cat &lt;文件名&gt; 编辑文件 进入vi编辑模式1vi &lt;文件名&gt; 在vi模式下 按 i 键 进入编辑模式 编辑文件 按 esc 键，退出编辑模式 :wq 保存并退出 :q! 强制退出，不保存 工作区进行提交到暂存区 提交全部 123git add .或者git add -A 提交单个文件 1git add &lt;文件名&gt; 暂存区提交到版本库1git commit -m &quot;更新内容描述&quot; 提交到版本库1git push 查看文件所在区的提交状态1git status]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[node-EventEmitter方法]]></title>
      <url>%2F2017%2F04%2F24%2Fnode-EventEmitter%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[EventEmitter方法 addListener(eventName,listener) 对指定事件绑定监听 on(enentName,listener) 对指定事件绑定监听同 addListener(eventName,listener) once(eventName,listener) 对指定事件仅绑定一次 removeListener(eventName，listener) 解除绑定监听 removeAllListener(eventName) 解除所有绑定的监听事件 emit(eventName,args) 触发事件第一个是事件类型 args是传入的参数]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jsonp跨域]]></title>
      <url>%2F2017%2F04%2F23%2Fjsonp%2F</url>
      <content type="text"><![CDATA[两个网站要共享数据jsonp 为跨域的最常见的手段（不能发送数据，只支持get请求）ajax会有限制问题，会出现不允许访问。jsonp,cros,postMessage(iframe),websocket; jsonp:scritp 不会导致跨域问题，我的网站引用你的网站的js,img,css,不用img和css的原因是默认会被转成图片和样式，img常用作记录访问页面的次数，统计请求这样图片的次数。 jsonp是通过src跨域的，并且只支持get请求。 由于src没有访问限制，可以通过src引用其他网站的数据（此网站必须通过这样的接口） cros 让被访问的服务器 允许跨域即可 （需要服务端支持） iftame 跨域 html5 提供的API websocket html5 提供的APIjsonp 的原理 1.在当前js中声明一个全局函数function fn(){} 2.动态创建script标签通过script 标签引用其他网址并且将这个全局函数名字传递给后台 1&lt;script src =&quot;http://localhost:3000/getuser?callback=fn&quot;&gt; 3.后台返回函数执行fn(&#39;{name:1}&#39;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WebStorm搭建本地授权服务]]></title>
      <url>%2F2017%2F02%2F09%2FWebStorm%E3%80%81PhpStorm%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%2F</url>
      <content type="text"><![CDATA[本地搭建各种storm License Server ,建立自己的本地授权服务器。告别那些恶心的注册码。 适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。1、下载下面的文件 链接地址： http://ol31uv24o.bkt.clouddn.com/IDEALicenseServer.zip 2、解压文件，找到自己的操作版本。以下使用windows64位系统做示例。找到 双击运行 IntelliJIDEALicenseServer_windows_amd64.exe 3、之前如果通过其他方式注册的，可以在 WebStorm 中的 Helep 选项下 Register… 选项中进行重新注册。 4、在注册界面选择 License server 授权服务器，填写 http://127.0.0.1:41017,然后点击 “Activate” ,如下图]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git在mac中自动补全功能配置]]></title>
      <url>%2F2017%2F01%2F25%2Fgit%E5%9C%A8mac%E4%B8%AD%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[ps:在 MAC 中使用自带的命令行工具来操作git很不方便，没有提示对于我这种英语渣渣的人来说简直是不能接受。 话不多说直接走起 首先使用 $ brew list 命令来查看你是否已经安装了bash-completion ，如果没有继续向下进行，有的跳过下一步。 接下来安装 bash-completion ，执行以下命令： $ brew install bash-completion 安装完成之后运行 $ brew info bash-completion 在最下方会出现 ==&gt; Caveats Add the following lines to your ~/.bash_profile: if [ -f $(brew --prefix)/etc/bash_completion ]; then . $(brew --prefix)/etc/bash_completion fi 这个是已经配置好的，正常的是没有if…then…这段的。 这时候我们需要在当前用户根目录（即 ~/ 目录）下创建一个 .bash_profile 文件（即创建路径为 ~/.bash_profile ），接下来将 if [ -f $(brew --prefix)/etc/bash_completion ]; then . $(brew --prefix)/etc/bash_completion fi 添加到 .bash_profile 文件内。 注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！安装完 bash-completion 重启终端命令行工具，继续一下步骤。 然后将 Git 源码中的 completion.bash 源码clone到本地 $ git clone https://github.com/markgandolfo/git-bash-completion 在下载的git-bash-completion文件夹中，找到git-bash-completion文件夹中的git-bash-completion文件。将此文件重名为.git-bash-completion（目的是将此文件隐藏在用户跟目录中，防止意外将其删除）。如果重命名不成功，可以通过 $ vi .git-bash-completion 命令在用户跟目录下进行创建，然后通过编辑器将git-bash-completion文件中的内容复制到.git-bash-completion文件中。 之后，在用户跟目录下创建.bashrc文件，此文件也可以通过 $ vi .bashrc 命令进行创建，其内容如下： source ~/.git-completion.bashrc 然后保存。 配置都已完成，重启终端命令行工具即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[开篇记]]></title>
      <url>%2F2017%2F01%2F01%2F%E5%BC%80%E7%AF%87%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[开篇 在新年的第一天决定，2017需要改变一下自己的学习方法，进而通过这种方式来记录自己在前端学习路上的所见、所学、所感。 目标 掌握Markdown语法，更好的为自己服务。 会简单介绍一下自己在此博客创建过程中走过的坑，方便他人亦是方便自己。 学习Vue.js 向往这种简单、优雅的框架。 感受一下weex 的魅力，以后的项目中很有可能会用的上，阿里还是很强大的。 当然也要学习现在最流行的前端项目整合工具-webpack 。 在工作项目中遇到的问题，与解决问题方法的记录。 待续 现在只想到这么多，这里只是给自己在今年做一个简单的计划，方便自己理清学习思路。]]></content>
    </entry>

    
  
  
</search>
